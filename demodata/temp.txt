Introduction to Transport Layer and the Relationship between Transport and Network Layer
The transport layer provides an end-to-end connection between two applications running on different hosts. Of course, the transport layer provides this logical connection regardless of whether the hosts are in the same network.

Here is how it works. The transport layer on the sending host receives a message from the application layer and appends its own header. We refer to this combined message as a segment. This transport layer segment is then sent to the network layer which will append (encapsulate) this segment with its header information. Then it will send it to the receiving host via routers, bridges, switches, etc.

One might ask, why do we need an additional layer between the application and the network layer? Recall that the network layer offers a best-effort delivery service model. According to this model, the network layer makes the best effort to deliver data packets. Thus, it does not guarantee the delivery of packets, nor does it guarantee the integrity of the data. So, here is where the transport layer comes to offer some of these functionalities. The transport layer allows application programmers to develop applications assuming a standard set of functionalities provided by the transport layer. So the applications can run over diverse networks regardless of different network interfaces or possible unreliability of the network.

The two most common transport layer protocols are User Datagram Protocol (UDP) and Transmission Control Protocol (TCP). These protocols offer different functionalities to application developers. UDP provides basic functionality and relies on the application layer to implement the remaining. On the other hand, TCP provides strong primitives to make end-to-end communication more reliable and cost-effective. In fact, because of these primitives, TCP has become quite ubiquitous and is used for most applications today. We will now look at these functionalities in detail.